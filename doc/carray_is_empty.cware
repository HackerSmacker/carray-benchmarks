





















.TH "CARRAY_IS_EMPTY" "cware" "March 8th, 2022" "" \
    "C-Ware Manual"


.SH NAME
carray_is_empty - determine if an array is empty

.SH SYNOPSIS

.B #include <stdio.h>
.br
.B #include <stdlib.h>
.br
.B #include <string.h>
.br
.B #include <cware/carray/carray.h>
.br


.BI "#define carray_is_empty(" "array" ");"
.br

.SH DESCRIPTION
The
.B carray_is_empty
macro will determine if an array is empty. If the array is empty, this will
return 1. If it is not empty, this will return 0.

This macro has no error conditions.

.I array
will be the array to check for emptiness
.br

.SH EXAMPLES

/*
 * This example showcases how to use the
.B carray_is_empty
macro.
.br
*/


.B #include <stdio.h>
.br
.B #include <stdlib.h>
.br
.B #include <string.h>
.br
.B #include <cware/carray/carray.h>
.br


.TS
tab(;);
l l
.
#define STRING_ARRAY_TYPE;char*
#define STRING_ARRAY_HEAP;1
#define STRING_ARRAY_FREE(value);NULL
#define STRING_ARRAY_COMPARE(cmp_a, cmp_b);(strcmp(cmp_a, cmp_b) == 0)
.TE

struct StringArray {
    int length;
    int capacity;
    char **contents;
.br
};


int main(void) {
.br
    struct StringArray *array = carray_init(array, STRING_ARRAY);
.br

    /* Append some data to the array */
.br
    carray_append(array, "foo", STRING_ARRAY);
.br
    carray_append(array, "bar", STRING_ARRAY);
.br
    carray_append(array, "baz", STRING_ARRAY);
.br

    /* Check if the array is empty */
.br
    if(carray_is_empty(array) == 1) {
.br
        printf("%s", "The array is empty.\\n");
.br
    } else {
.br
        printf("%s", "The array is not empty.\\n");
.br
    }
.br

    /* Release the allocated array */
.br
    carray_is_empty(array, STRING_ARRAY);
.br

    return EXIT_SUCCESS;
.br
}

.SH SEE ALSO

.BR cware (cware),
.BR carray (cware)


